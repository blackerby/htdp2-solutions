;; The first three lines of this file were inserted by DrRacket. They record metadata
;; about the language level of this file in a form that our tools can easily process.
#reader(lib "htdp-beginner-reader.ss" "lang")((modname 09_05) (read-case-sensitive #t) (teachpacks ()) (htdp-settings #(#t constructor repeating-decimal #f #t none #f () #f)))
(require 2htdp/image)
(require 2htdp/universe)

(define HEIGHT 80) ; distances in terms of pixels 
(define WIDTH 100)
(define XSHOTS (/ WIDTH 2))
 
; graphical constants 
(define BACKGROUND (empty-scene WIDTH HEIGHT))
(define SHOT (triangle 3 "solid" "red"))

; List-of-numbers is one of
; - '()
; (cons Number List-of-numbers)

; A Shot is a Number.
; interpretation represents the shot's y-coordinate 

; A ShotWorld is List-of-numbers. 
; interpretation each number on such a list
;   represents the y-coordinate of a shot 

; ShotWorld -> Image
; adds the image of a shot for each  y on w 
; at (XSHOTS,y) to the background image
(check-expect (to-image (cons 9 '()))
              (place-image SHOT XSHOTS 9 BACKGROUND))
(check-expect (to-image (cons 20 (cons 9 '())))
              (place-image SHOT XSHOTS 20
                                 (place-image SHOT XSHOTS 9 BACKGROUND)))
(define (to-image w)
  (cond
    [(empty? w) BACKGROUND]
    [else
     (place-image SHOT XSHOTS (first w) (to-image (rest w)))]))

; ShotWorld -> ShotWorld
; moves each shot on w up by one pixel
(check-expect (tock '()) '())
(check-expect (tock (cons 9 '())) (cons 8 '()))
(check-expect (tock (cons 20 (cons 9 '()))) (cons 19 (cons 8 '())))
(define (tock w)
  (cond
    [(empty? w) w]
    [(cons? w)
     (cons (sub1 (first w)) (tock (rest w)))]))

; ShotWorld -> ShotWord
; moves each shot on w up by one pixel
; removes shot when it leaves canvas
(check-expect (better-tock '()) '())
(check-expect (better-tock (cons 9 '())) (cons 8 '()))
(check-expect (better-tock (cons 20 (cons 9 '()))) (cons 19 (cons 8 '())))
(check-expect (better-tock (cons 0 '())) '())
(check-expect (better-tock (cons -1 '())) '())
(check-expect (better-tock (cons 9 (cons 0 '()))) (cons 8 '()))
(define (better-tock w)
  (tock (visible w)))

; ShotWorld -> ShotWorld
; returns shots that would be visible when rendered
(check-expect (visible  '()) '())
(check-expect (visible (cons 20 (cons 9 '()))) (cons 20 (cons 9 '())))
(check-expect (visible (cons -1 '())) '())
(check-expect (visible (cons 9 (cons 0 '()))) (cons 9 '()))
(define (visible w)
  (cond
    [(empty? w) w]
    [(cons? w)
     (if (> (first w) 0)
         (cons (first w) (visible (rest w)))
         (visible (rest w)))]))

; ShotWorld KeyEvent -> ShotWorld 
; adds a shot to the world 
; if the player presses the space bar
(check-expect (keyh '() " ") (cons HEIGHT '()))
(check-expect (keyh (cons 9 '()) " ") (cons HEIGHT (cons 9 '())))
(check-expect (keyh '() "left") '())
(define (keyh w ke)
  (if (key=? ke " ") (cons HEIGHT w) w))

; ShotWorld -> ShotWorld
; takes a ShotWorld and returns a new ShotWorld based on events
; renders images of Shots in ShotWorld
(define (main w0)
  (big-bang w0
    [on-tick better-tock]
    [on-key keyh]
    [to-draw to-image]))
